' /**
'  * @module TestRunner
'  */

' /**
'  * @memberof module:TestRunner
'  * @name Rooibos_TestRunner
'  * @function
'  * @description Creates an instance of the test runner
'  * @param {Dynamic} args - contains the application launch args, and other settings required for test execution
'  */
class TestRunner
  private RunItGroups = TestRunnerMixin_runItGroups
  private RunTestCases = TestRunnerMixin_runTestCases

  public function new(args = {})
    m.testScene = args.testScene
    m.nodeContext = args.nodeContext

    'bs:disable-next-line
    config = RBSFM_getRuntimeConfig()
    if (config = invalid or not Common.isAssociativeArray(config))
      ? "WARNING : specified config is invalid - using default"
      config = {
        showOnlyFailures: false
        failFast: false
      }
    end if

    'mix in parsed in args
    if (args.showOnlyFailures <> invalid)
      config.showOnlyFailures = args.showOnlyFailures = "true"
    end if

    if (args.failFast <> invalid)
      config.failFast = args.failFast = "true"
    end if

    m.testUtilsDecoratorMethodName = args.testUtilsDecoratorMethodName
    m.config = config

    ' Internal properties
    m.config.testsDirectory = config.testsDirectory

    m.logger = new Logger(m.config)
    m.global = args.global
  end function

  ' /**
  '  * @memberof module:TestRunner
  '  * @name Run
  '  * @function
  '  * @instance
  '  * @description Executes all tests for a project, as per the config
  '  */
  public sub run()
    if type(RBSFM_getTestSuitesForProject) <> "Function"
      ? " ERROR! RBSFM_getTestSuitesForProject is not found! That looks like you didn't run the preprocessor as part of your test process. Please refer to the docs."
      return
    end if

    totalStatObj = Stats.createTotalStatistic()
    m.runtimeConfig = new UnitTestRuntimeConfig()
    m.runtimeConfig.global = m.global
    totalStatObj.testRunHasFailures = false

    for each metaTestSuite in m.runtimeConfig.suites
      if (m.runtimeConfig.hasSoloTests = true)
        if (metaTestSuite.hasSoloTests <> true)
          if (m.config.logLevel = 2)
            ? "TestSuite " ; metaTestSuite.name ; " Is filtered because it has no solo tests"
          end if
          goto skipSuite
        end if
      else if (m.runtimeConfig.hasSoloSuites)
        if (metaTestSuite.isSolo <> true)
          if (m.config.logLevel = 2)
            ? "TestSuite " ; metaTestSuite.name ; " Is filtered due to solo flag"
          end if
          goto skipSuite
        end if
      end if

      if (metaTestSuite.isIgnored = true)
        if (m.config.logLevel = 2)
          ? "Ignoring TestSuite " ; metaTestSuite.name ; " Due to Ignore flag"
        end if
        totalstatobj.ignored++
        totalStatObj.IgnoredTestNames.push("|-" + metaTestSuite.name + " [WHOLE SUITE]")

        goto skipSuite
      end if
      ? ""
      ? Common.fillText("> SUITE: " + metaTestSuite.name, ">", 80)

      if (metaTestSuite.isNodeTest = true and metaTestSuite.nodeTestFileName <> "")
        ? " +++++RUNNING NODE TEST"
        nodeType = metaTestSuite.nodeTestFileName
        ? " node type is " ; nodeType

        node = m.testScene.CallFunc("rooibos_createTestNode", nodeType)

        if (type(node) = "roSGNode" and node.subType() = nodeType)
          args = {
            "metaTestSuite": metaTestSuite
            "testUtilsDecoratorMethodName": m.testUtilsDecoratorMethodName
            "config": m.config
            "runtimeConfig": m.runtimeConfig
          }
          nodeStatResults = node.callFunc("rooibos_runNodeTests", args)
          if nodeStatResults <> invalid
            Stats.mergeTotalStatistic(totalStatObj, nodeStatResults)
          else
            ? " ERROR! The node "; nodeType; " did not return stats from the rooibos_runNodeTests method. This usually means you are not importing rooibosDist.brs, or rooibosFunctionMap.brs. Please refer to : https://github.com/georgejecook/rooibos/blob/master/docs/index.md#testing-scenegraph-nodes"
          end if
          m.testScene.RemoveChild(node)

        else
          ? " ERROR!! - could not create node required to execute tests for " ; metaTestSuite.name
          ? " Node of type " ; nodeType ; " was not found/could not be instantiated"
        end if
      else
        if (metaTestSuite.hasIgnoredTests)
          totalStatObj.IgnoredTestNames.push("|-" + metaTestSuite.name)
        end if
        m.RunItGroups(metaTestSuite, totalStatObj, m.testUtilsDecoratorMethodName, m.config, m.runtimeConfig, m.nodeContext)
      end if
      skipSuite:
    end for
    m.logger.PrintStatistic(totalStatObj)

    if Common.isFunction(RBS_reportCodeCoverage)
      'bs:disable-next-line
      RBS_reportCodeCoverage()

      if m.config.printLcov = true
        Coverage.printLCovInfo()
      end if
    end if
    m.sendHomeKeypress()
  end sub


  public sub sendHomeKeypress()
    ut = createObject("roUrlTransfer")
    ut.SetUrl("http://localhost:8060/keypress/Home")
    ut.PostFromString("")
  end sub

end class

'TODO convert to namespace when Bron fixes bug that does not allow ns resoluiton on assignment
' namespace Rooibos.TestRunnerMixin

sub TestRunnerMixin_runItGroups(metaTestSuite, totalStatObj, testUtilsDecoratorMethodName, config, runtimeConfig, nodeContext = invalid)
  if (testUtilsDecoratorMethodName <> invalid)
    testUtilsDecorator = Common.getFunctionBruteForce(testUtilsDecoratorMethodName)
    if (not Common.isFunction(testUtilsDecorator))
      ? "[ERROR] Test utils decorator method `" ; testUtilsDecoratorMethodName ;"` was not in scope! for testSuite: " + metaTestSuite.name
    end if
  end if

  for each itGroupData in metaTestSuite.itGroups
    itGroup = new ItGroup(itGroupData)
    testSuite = itGroup.getRunnableTestSuite()
    if (nodeContext <> invalid)
      testSuite.node = nodeContext
      testSuite.global = nodeContext.global
      testSuite.top = nodeContext.top
    end if

    if (Common.isFunction(testUtilsDecorator))
      testUtilsDecorator(testSuite)
    end if

    totalStatObj.Ignored = totalStatObj.Ignored + itGroup.ignoredTestCases.count()

    if (itGroup.isIgnored = true)
      if (config.logLevel = 2)
        ? "Ignoring itGroup " ; itGroup.name ; " Due to Ignore flag"
      end if
      totalStatObj.ignored = totalStatObj.ignored + itGroup.testCases.count()
      totalStatObj.IgnoredTestNames.push("  |-" + itGroup.name + " [WHOLE GROUP]")
      goto skipItGroup
    else
      if (itGroup.ignoredTestCases.count() > 0)
        totalStatObj.IgnoredTestNames.push("  |-" + itGroup.name)
        totalStatObj.ignored = totalStatObj.ignored + itGroup.ignoredTestCases.count()
        for each testCase in itGroup.ignoredTestCases
          if (testcase.isParamTest <> true)
            totalStatObj.IgnoredTestNames.push("  | |--" + testCase.name)
          else if (testcase.paramTestIndex = 0)
            testCaseName = testCase.name
            if (len(testCaseName) > 1 and right(testCaseName, 1) = "0")
              testCaseName = left(testCaseName, len(testCaseName) - 1)
            end if
            totalStatObj.IgnoredTestNames.push("  | |--" + testCaseName)
          end if
        end for
      end if
    end if

    if (runtimeConfig.hasSoloTests)
      if (itGroup.hasSoloTests <> true)
        if (config.logLevel = 2)
          ? "Ignoring itGroup " ; itGroup.name ; " Because it has no solo tests"
        end if
        goto skipItGroup
      end if
    else if (runtimeConfig.hasSoloGroups)
      if (itGroup.isSolo <> true)
        goto skipItGroup
      end if
    end if

    if (testSuite.testCases.Count() = 0)
      if (config.logLevel = 2)
        ? "Ignoring TestSuite " ; itGroup.name ; " - NO TEST CASES"
      end if
      goto skipItGroup
    end if
    ? ""
    ? Common.fillText("> GROUP: " + itGroup.name, ">", 80)

    if Common.isFunction(testSuite.SetUp)
      testSuite.SetUp()
    end if

    TestRunnerMixin_runTestCases(metaTestSuite, itGroup, testSuite, totalStatObj, config, runtimeConfig)

    if Common.isFunction(testSuite.TearDown)
      testSuite.TearDown()
    end if

    if (totalStatObj.testRunHasFailures = true and config.failFast = true)
      exit for
    end if
    skipItGroup:
  end for
end sub

sub TestRunnerMixin_runTestCases(metaTestSuite, itGroup, testSuite, totalStatObj, config, runtimeConfig)
  suiteStatObj = Stats.createSuiteStatistic(itGroup.name)
  testSuite.global = runtimeConfig.global

  for each testCase in testSuite.testCases
    metaTestCase = itGroup.testCaseLookup[testCase.name]
    metaTestCase.time = 0
    if (runtimeConfig.hasSoloTests and not metaTestCase.isSolo)
      goto skipTestCase
    end if
    ? ""
    ? Common.fillText("> TEST: " + testCase.name + " ", ">", 80)

    if Common.isFunction(testSuite.beforeEach)
      testSuite.beforeEach()
    end if

    testTimer = createObject("roTimespan")
    testCaseTimer = createObject("roTimespan")
    testStatObj = Stats.createTestStatistic(testCase.name)
    testSuite.testCase = testCase.Func
    testStatObj.filePath = metaTestSuite.filePath
    testStatObj.metaTestCase = metaTestCase
    testSuite.currentResult = new UnitTestResult()

    testStatObj.metaTestCase.testResult = testSuite.currentResult

    if (metaTestCase.isParamsValid)
      if (metaTestCase.isParamTest)
        testCaseParams = []
        for paramIndex = 0 to metaTestCase.rawParams.count()
          paramValue = metaTestCase.rawParams[paramIndex]
          if type(paramValue) = "roString" and len(paramValue) >= 8 and left(paramValue, 8) = "#RBSNode"
            nodeType = "ContentNode"
            paramDirectiveArgs = paramValue.split("|")
            if paramDirectiveArgs.count() > 1
              nodeType = paramDirectiveArgs[1]
            end if
            paramValue = createObject("roSGNode", nodeType)
          end if
          testCaseParams.push(paramValue)
        end for
        testCaseTimer.mark()
        'up to 10 param args supported for now
        if (metaTestCase.expectedNumberOfParams = 1)
          testSuite.testCase(testCaseParams[0])
        else if (metaTestCase.expectedNumberOfParams = 2)
          testSuite.testCase(testCaseParams[0], testCaseParams[1])
        else if (metaTestCase.expectedNumberOfParams = 3)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2])
        else if (metaTestCase.expectedNumberOfParams = 4)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3])
        else if (metaTestCase.expectedNumberOfParams = 5)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4])
        else if (metaTestCase.expectedNumberOfParams = 6)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5])
        else if (metaTestCase.expectedNumberOfParams = 7)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6])
        else if (metaTestCase.expectedNumberOfParams = 8)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6], testCaseParams[7])
        else if (metaTestCase.expectedNumberOfParams = 9)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6], testCaseParams[7], testCaseParams[8])
        else if (metaTestCase.expectedNumberOfParams = 10)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6], testCaseParams[7], testCaseParams[8], testCaseParams[9])
        else if (metaTestCase.expectedNumberOfParams = 11)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6], testCaseParams[7], testCaseParams[8], testCaseParams[9], testCaseParams[10])
        else if (metaTestCase.expectedNumberOfParams = 12)
          testSuite.testCase(testCaseParams[0], testCaseParams[1], testCaseParams[2], testCaseParams[3], testCaseParams[4], testCaseParams[5], testCaseParams[6], testCaseParams[7], testCaseParams[8], testCaseParams[9], testCaseParams[10], testCaseParams[11])
        else if (metaTestCase.expectedNumberOfParams > 12)
          testSuite.fail("Test case had more than 12 params. Max of 12 params is supported")
        end if
        metaTestCase.time = testCaseTimer.totalMilliseconds()
      else
        testCaseTimer.mark()
        testSuite.testCase()
        metaTestCase.time = testCaseTimer.totalMilliseconds()
      end if
    else
      testSuite.Fail("Could not parse args for test ")
    end if
    if testSuite.isAutoAssertingMocks = true
      testSuite.AssertMocks()
      testSuite.CleanMocks()
      testSuite.CleanStubs()
    end if
    runResult = testSuite.currentResult.getResult()


    if runResult <> ""
      testStatObj.result = "Fail"
      testStatObj.error.Code = 1
      testStatObj.error.Message = runResult
    else
      testStatObj.result = "Success"
    end if

    testStatObj.time = testTimer.totalMilliseconds()
    Stats.appendTestStatistic(suiteStatObj, testStatObj)

    if Common.isFunction(testSuite.afterEach)
      testSuite.afterEach()
    end if

    if testStatObj.result <> "Success"
      totalStatObj.testRunHasFailures = true
    end if

    if testStatObj.result = "Fail" and config.failFast = true
      exit for
    end if
    skipTestCase:
  end for

  suiteStatObj.metaTestSuite = metaTestSuite
  Stats.appendSuiteStatistic(totalStatObj, suiteStatObj)
end sub