namespace Rooibos
  class ConsoleTestReporter extends BaseTestReporter

    function new(testRunner)
      super(testRunner)
      m.lineWidth = 60
    end function

    override function reportResults(allStats)
      m.allStats = allStats
      m.startReport()

      for each testSuite in m.testRunner.testSuites
        if not m.allTests.hasFailures or ((not m.config.showOnlyFailures) or testSuite.failedCount > 0 or testSuite.crashedCount > 0)
          m.startSuiteReport(testSuite)

          for each testGroup in testSuite.groups
            m.printGroup(testGroup)
          end for
        end if
      end for

      m.printLine()
      m.endReport()

      'bs:disable-next-line
      ignoredInfo = m.testRunner.getIgnoredTestInfo()
      m.printLine(0, "Total  = " + Rooibos.Common.AsString(m.allStats.total) + "  + Passed  = " + Rooibos.Common.AsString(m.allStats.passedCount) + "  + Failed   = " + Rooibos.Common.AsString(m.allStats.failedCount) + "  + Ignored   = " + Rooibos.Common.AsString(ignoredInfo.count))
      m.printLine(0, " Time spent: " + Rooibos.Common.AsString(m.allStats.time) + "ms")
      m.printLine()
      m.printLine()

      if ignoredInfo.count > 0
        m.printLine(0, "IGNORED TESTS:")
        for each ignoredItemName in ignoredInfo.items
          m.printLine(1, ignoredItemName)
        end for
        m.printLine()
        m.printLine()
      end if

      if stats.hasFailures
        overrallResult = "Success"
      else
        overrallResult = "Fail"
      end if
      m.printLine(0, "RESULT: " + overrallResult)

    end function

    function printGroup(testGroup)
      m.printGroupStart(testGrup)

      for each test in testGroup.tests
        if not m.allStats.hasFailures or ((not m.config.showOnlyFailures) or test.result.isFail)
          m.printTest(test)
        end if
      end for

      m.printLine(0, " |")
    end function

    function printTest(test)
      if test.result.isFail
        testChar = "-"
        locationLine = StrI(test.result.lineNumber).trim()
      else
        testChar = "|"
        locationLine = StrI(test.lineNumber).trim()
      end if

      locationText = "pkg:/" + test.testSuite.filePath.trim() + "(" + locationLine + ")"

      if m.config.printTestTimes = true
        timeText = " (" + stri(test.result.time).trim() + "ms)"
      else
        timeText = ""
      end if

      insetText = ""
      if test.isParamTest <> true
        messageLine = Rooibos.Common.fillText(" " + testChar + " |--" + test.name + " : ", ".", 80)
        m.printLine(0, messageLine + test.result.getStatusText() + timeText)
      else if test.paramTestIndex = 0
        name = test.name
        if len(name) > 1 and right(name, 1) = "0"
          name = left(name, len(name) - 1)
        end if
        m.printLine(0, " " + testChar + " |--" + name + " : ")
      end if

      if test.isParamTest = true
        insetText = "  "

        if type(test.rawParams) = "roAssociativeArray"
          rawParams = {}
          for each key in test.rawParams
            if type(test.rawParams[key]) <> "Function" and type(test.rawParams[key]) <> "roFunction"
              rawParams[key] = test.rawParams[key]
            end if
          end for
        else
          rawParams = test.rawParams
        end if
        messageLine = Rooibos.Common.fillText(" " + testChar + insetText + " |--" + formatJson(rawParams) + " : ", ".", 80)
        m.printLine(0, messageLine +  test.result.getStatusText() +  timeText)
      end if

      if not test.isFail
        m.printLine(0, " | " + insettext + "  |--Location: " + locationText)
        if test.isParamTest = true
          m.printLine(0, " | " + insettext + "  |--Param Line: " + StrI(test.paramlineNumber).trim())
        end if
        m.printLine(0, " | " + insettext + "  |--Error Message: " + test.result.message)
      end if
    end function

    function startReport()
      m.printLine()
      m.printLine(0, "[START TEST REPORT]")
      m.printLine()
    end function
    
    function endReport()
      m.printLine()
      m.printLine(0, "[END TEST REPORT]")
      m.printLine()
    end function

    function printGroupStart(testGroup)
      m.printLine(0, " |-" +  testGroup.name)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ printing
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function testLogInfo(text)
      ? "INFO " ; text
    end function

    override function testLogError(text)
      ? "ERROR " ; text
    end function

    function printLine(depth = 0, text = "")
      ? " " ; text
    end function

  end class
end namespace